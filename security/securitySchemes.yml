rules:
  sec-protection-get: &sec-protection-get
    description: |-
      Your API should be protected by a `security` rule either at
      global or operation level.
      All operations should be protected especially when they
      not safe (methods that do not alter the state of the server) 
      HTTP methods like `POST`, `PUT`, `PATCH` and `DELETE`.
      This is done with one or more non-empty `security` rules.

      Security rules are defined in the `securityScheme` section.

      An example of a security rule applied at global level.

      ```
      security:
      - BasicAuth: []
      paths:
        /books: {}
        /users: {}
      securitySchemes:
        BasicAuth:
          scheme: http
          type: basic
      ```

      An example of a security rule applied at operation level, which
      eventually overrides the global one

      ```
      paths:
        /books:
          post:
            security:
            - AccessToken: []
      securitySchemes:
        BasicAuth:
          scheme: http
          type: basic
        AccessToken:
          scheme: http
          type: bearer
          bearerFormat: JWT
      ```

      To make security optional, use `{}` as a security rules:

      ```
      paths:
        /books:
          post:
            security:
            - {}
      ```

    message: >-
      The following operation is not protected by a `security` rule: {{path}}
    formats:
    - oas3
    severity: info
    recommended: true
    given:
    - >-
      $.paths.*.get
    then:
    - field: security
      function: schema
      functionOptions:
        schema:
          items:
            type: object
            minProperties: 0
          minItems: 1
          type: array
  sec-protection-unsafe: &sec-protection-unsafe
    <<: *sec-protection-get
    message: >-
      The following unsafe operation is not protected by a `security` rule: {{path}}
    severity: error
    given:
      - >-
        $.paths.*[?(@property.match(/^(post|put|patch|delete)/))]
  sec-protection-unsafe-strict:
    <<: *sec-protection-unsafe
    severity: hint
    then:
    - field: security
      function: schema
      functionOptions:
        schema:
          items:
            type: object
            minProperties: 1
          minItems: 1
          type: array
  sec-securitySchemes-oauth: &jwt-bcp
    description: |-
      Json Web Tokens RFC7519 is a compact, URL-safe means of representing
      claims to be transferred between two parties. JWT can be enclosed in
      encrypted or signed tokens like JWS and JWE.

      The [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml)
      provides algorithms information.

      RFC8725 describes common pitfalls in the JWx specifications and in
      their implementations, such as:
      - the ability to ignore algorithms, eg. `{"alg": "none"}`;
      - using insecure algorithms like `RSASSA-PKCS1-v1_5` eg. `{"alg": "RS256"}`.

      An API using JWT should explicit in the `description`
      that the implementation conforms to RFC8725.

      ```
      components:
        securitySchemes:
          JWTBearer:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |-
              A bearer token in the format of a JWS and conformato
              to the specifications included in RFC8725.
      ```

    message: >-
      JWT usage should be detailed in `description` {{error}}.
    given:
      - >-
        $..[securitySchemes][?(@.type=="oauth2")]
    then:
      - field: description
        function: truthy
      - field: description
        function: pattern
        functionOptions:
          match: >-
           .*RFC8725.*
  sec-securitySchemes-jwt:
    <<: *jwt-bcp
    given:
      - >-
        $..[securitySchemes][?(@.bearerFormat=="jwt" || @.bearerFormat=="JWT")]
