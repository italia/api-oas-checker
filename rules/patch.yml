rules:
  patch-media-type:
    description: |-
      The PATCH specification explicits that the request body contains
      a "patch document" describing the changes to be applied
      to the target resource.

      To avoid confusion, [this errata](https://www.rfc-editor.org/errata/eid3169)
      explains that `application/json` is not an appropriate media-type for `PATCH`.

      A correct example of PATCH using eg. `application/json-patch+json` media-type
      defined in RFC6902.

      ```
      paths:
        /books/{book_id}:
          patch:
            requestBody:
              content:
                application/json-patch+json:
                  schema:
                    type: array
                    ...
                  example: [{ "op": "add", "path": "/baz", "value": "qux" }]
      ```
    message: >-
      application/json is not an appropriate media-type for PATCH. {{path}}
    formats:
    - oas3
    severity: error
    recommended: true
    given: >-
      $..[patch][requestBody][content]
    then:
      field: application/json
      function: falsy
  patch-without-request-body:
    description: |-
      The PATCH method requests that a set of changes described in the
      `requestBody` be applied to the target resource.
      A PATCH specification without a `requestBody`
      just applies no changes to the target resource.

      Since PATCH has impacts on caches, using it
      on a different target resource may result in non-interoperable
      behavior.

      For example, to modify the resource at `/user/123`,
      you can use the following PATCH request:

      ```
      PATCH /user/123
      Content-Type: application/json-patch+json

      [{"op": "replace", "path": "enable", "value": true}]
      ```

      or  POST request with the semantic implied by the target url:

      ```
      POST /user/123/enable
      ```

      Instead, the following request
      is expected to modify the `/user/123/enable`
      subresource, and not the `/user/123` one.

      ```
      PATCH /user/123/enable
      ````
    message: >-
      PATCH requires a non empty requestBody.
    severity: error
    given: >-
      $.paths.*.patch
    then:
    - field: requestBody
      function: defined
    - field: requestBody.required
      function: truthy
  request-GET-no-body:
    description: |-
      A `GET` request MUST NOT accept a `requestBody`
      because this behavior is not interoperable.
      Moreover intermediaries such as reverse proxies
      are allowed to strip the content from `GET` requests.

      See RFC7231 for further information.
    message: >-
      A GET request MUST NOT accept a requestBody: {{error}}.
    severity: error
    given: $.paths..get.requestBody
    then:
      function: undefined
  patch-json-patch-mediatype:
    description: |-
      A correct example of PATCH using eg. `application/json-patch+json` media-type
      defined in RFC6902.

      ```
      paths:
        /books/{book_id}:
          patch:
            requestBody:
              content:
                application/json-patch+json:
                  schema:
                    type: array
                    ...
                  example: [{ "op": "add", "path": "/baz", "value": "qux" }]
      ```
    message: >-
      application/json-patch+json is not an array. {{path}}
    formats:
    - oas3
    severity: warn
    recommended: true
    given: >-
      $..[patch][requestBody][content][application/json-patch+json][schema]
    then:
      field: type
      function: pattern
      functionOptions:
        match: array
