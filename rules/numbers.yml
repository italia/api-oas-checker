#
# Here we use yaml merge keys to reuse existing rules.
#
rules:
  number-format: &number-format
    description: |-
      Schema of type number or integer must specify a format
      to express the associated datatype, eg. `int32`, `int64`, ...

      You can express similar requirements using the `minimum` and `maximum` properties.

      See recommendation RAC_REST_FORMAT_004.
    message: >-
      Schema of type number or integer must specify a format. {{path}}
    formats:
    - oas3
    severity: error
    recommended: true
    given: >-
      $..[?(@ && @.type=="number")]
    then:
      field: format
      function: truthy
  # Reuse the number-format description and message.
  integer-format:
    <<: *number-format
    given: >-
      $..[?(@ && @.type=="integer")]

  allowed-integer-format: &allowed-integer-format
    description: |-
      To improve interoperability, integer and number formats are constrained
      to a shared subset.

      See recommendation RAC_REST_FORMAT_004.
    message: >-
      Type format is "{{value}}", expected one of [int32, int64]. {{path}}
    formats:
    - oas3
    severity: hint
    recommended: true
    given: >-
      $..[?(@ && @.type=="integer")]
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
        - int32
        - int64
  allowed-number-format:
    <<: *allowed-integer-format
    message: >-
      Type format is "{{value}}", expected one of [decimal32, decimal64, decimal128, float, double]. {{path}}
    given: >-
      $..[?(@ && @.type=="number")]
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
        - decimal32
        - decimal64
        - float
        - double
        - decimal128

